version: '3.8'

services:
  # Serviço do Banco de Dados MongoDB
  db:
    image: mongo:4.4 # Versão estável que não exige instruções de CPU AVX
    container_name: cchoras_mongo_db
    restart: unless-stopped
    volumes:
      # Persiste os dados do banco de dados em um volume nomeado
      - mongo-data:/data/db
    healthcheck:
      # Testa se o servidor MongoDB está respondendo.
      test: ["CMD", "mongo", "--eval", "db.adminCommand('ping')"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - cchoras-net

  # Serviço do Backend (API Node.js)
  backend:
    build: ./backend
    container_name: cchoras_backend
    restart: unless-stopped
    depends_on:
      db:
        condition: service_healthy # Inicia o backend apenas quando o healthcheck do 'db' passar.
    env_file:
      - ./.env # Carrega o JWT_SECRET a partir de um arquivo .env
    environment:
      # A URL para se conectar ao serviço 'db' nesta mesma rede
      - DATABASE_URL=mongodb://db:27017/cchoras
      # A porta que o Node.js vai escutar DENTRO do contêiner
      - PORT=3000
    volumes:
      # Sincroniza o código local com o contêiner para desenvolvimento ao vivo
      - ./backend:/usr/src/app
      # Evita que a pasta node_modules local sobrescreva a do contêiner
      - /usr/src/app/node_modules
    healthcheck:
      # Testa se o servidor Node.js está respondendo na rota de health check.
      test: ["CMD", "curl", "-f", "http://localhost:3000/"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - cchoras-net

  # Serviço do Frontend (Nginx)
  frontend:
    build: ./frontend
    container_name: cchoras_frontend
    restart: unless-stopped
    depends_on:
      backend:
        condition: service_healthy # Inicia o frontend apenas quando o healthcheck do 'backend' passar.
    ports:
      # Mapeia a porta 8080 do seu computador para a porta 8080 do contêiner
      # Acesse a aplicação em http://localhost:8080
      - "8080:8080"
    networks:
      - cchoras-net

# Define a rede compartilhada para os serviços se comunicarem
networks:
  cchoras-net:
    driver: bridge

# Define o volume nomeado para persistir os dados do MongoDB
volumes:
  mongo-data: